<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/FoodIntent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/FoodIntent.kt" />
              <option name="originalContent" value="package com.example.swiggyy.feature_food&#10;&#10;sealed class FoodIntent {&#10;    object LoadData : FoodIntent()&#10;    data class SearchQueryChanged(val query: String) : FoodIntent()&#10;&#10;    data class CategoryClicked(val category: FoodCategory) : FoodIntent()&#10;    data class RestaurantClicked(val restaurant: Restaurant) : FoodIntent()&#10;    data class StoreItemClicked(val item: StoreItem) : FoodIntent()&#10;    data class SwiggyOptionClicked(val option: SwiggyOption) : FoodIntent()&#10;    data class FilterSelected(val filter: String) : FoodIntent()&#10;    data class SortSelected(val sort: String) : FoodIntent()&#10;&#10;    object LocationClicked : FoodIntent()&#10;    object SeeAllNinetyNineStore : FoodIntent()&#10;    data class ToggleFavorite(val restaurantId: String, val isFavorite: Boolean) : FoodIntent()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.swiggyy.feature_food&#10;&#10;import com.example.swiggyy.feature_food.model.*&#10;&#10;sealed class FoodIntent {&#10;    object LoadData : FoodIntent()&#10;    data class SearchQueryChanged(val query: String) : FoodIntent()&#10;&#10;    data class CategoryClicked(val category: Category) : FoodIntent()&#10;    data class RestaurantClicked(val restaurant: Restaurant) : FoodIntent()&#10;    data class StoreItemClicked(val item: StoreItem) : FoodIntent()&#10;    data class SwiggyOptionClicked(val option: SwiggyOption) : FoodIntent()&#10;    data class FilterSelected(val filter: String) : FoodIntent()&#10;    data class SortSelected(val sort: String) : FoodIntent()&#10;&#10;    object LocationClicked : FoodIntent()&#10;    object SeeAllNinetyNineStore : FoodIntent()&#10;    data class ToggleFavorite(val restaurantId: String, val isFavorite: Boolean) : FoodIntent()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/components/FoodComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/components/FoodComponents.kt" />
              <option name="originalContent" value="package com.example.swiggyy.feature_food.components&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.swiggyy.R&#10;import com.example.swiggyy.feature_food.model.FoodCategory&#10;import com.example.swiggyy.feature_food.model.Restaurant&#10;import com.example.swiggyy.feature_food.model.StoreItem&#10;import com.example.swiggyy.feature_food.model.SwiggyOption&#10;&#10;@Composable&#10;fun CategoryItem(&#10;    category: FoodCategory,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;            .clickable(onClick = onClick)&#10;            .padding(4.dp)&#10;    ) {&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(64.dp)&#10;                .clip(CircleShape)&#10;                .background(Color.LightGray.copy(alpha = 0.2f))&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = category.imageRes),&#10;                contentDescription = category.name,&#10;                modifier = Modifier.size(32.dp)&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;        Text(&#10;            text = category.name,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            textAlign = TextAlign.Center,&#10;            maxLines = 2,&#10;            overflow = TextOverflow.Ellipsis&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RestaurantCard(&#10;    restaurant: Restaurant,&#10;    onRestaurantClick: () -&gt; Unit,&#10;    onFavoriteClick: (Boolean) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onRestaurantClick,&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(12.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = restaurant.imageRes),&#10;                    contentDescription = restaurant.name,&#10;                    contentScale = ContentScale.Crop,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;                &#10;                // Favorite button&#10;                IconButton(&#10;                    onClick = { onFavoriteClick(!restaurant.isFavorite) },&#10;                    modifier = Modifier&#10;                        .align(Alignment.TopEnd)&#10;                        .padding(8.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (restaurant.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                        contentDescription = if (restaurant.isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;,&#10;                        tint = if (restaurant.isFavorite) Color.Red else Color.White&#10;                    )&#10;                }&#10;                &#10;                // Offer tag&#10;                if (restaurant.offer.isNotEmpty()) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .align(Alignment.BottomStart)&#10;                            .padding(8.dp)&#10;                            .background(Color.Black.copy(alpha = 0.7f), RoundedCornerShape(4.dp))&#10;                            .padding(horizontal = 8.dp, vertical = 4.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = restaurant.offer,&#10;                            color = Color.White,&#10;                            style = MaterialTheme.typography.labelSmall&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            &#10;            // Restaurant details&#10;            Column(&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = restaurant.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                &#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Star,&#10;                        contentDescription = &quot;Rating&quot;,&#10;                        tint = Color(0xFFFFD700),&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;${restaurant.rating} (${restaurant.reviewCount})&quot;,&#10;                        style = MaterialTheme.typography.labelSmall&#10;                    )&#10;                    Text(&quot;•&quot;, modifier = Modifier.padding(horizontal = 2.dp))&#10;                    Text(&#10;                        text = restaurant.deliveryTime,&#10;                        style = MaterialTheme.typography.labelSmall&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = restaurant.cuisines.joinToString(&quot; • &quot;),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = Color.Gray,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                &#10;                if (restaurant.distance.isNotEmpty()) {&#10;                    Text(&#10;                        text = restaurant.distance,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;                &#10;                if (restaurant.hasFreeDelivery) {&#10;                    Text(&#10;                        text = &quot;FREE DELIVERY&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = Color.Green,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoreItemCard(&#10;    item: StoreItem,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(8.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.Center,&#10;            modifier = Modifier.padding(8.dp)&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = item.imageRes),&#10;                contentDescription = item.name,&#10;                modifier = Modifier&#10;                    .size(80.dp)&#10;                    .clip(RoundedCornerShape(8.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = item.name,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            &#10;            Text(&#10;                text = &quot;₹${item.discountedPrice}&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            if (item.originalPrice &gt; item.discountedPrice) {&#10;                Text(&#10;                    text = &quot;₹${item.originalPrice}&quot;,&#10;                    style = MaterialTheme.typography.labelSmall.copy(&#10;                        color = Color.Gray,&#10;                        textDecoration = TextDecoration.LineThrough&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SwiggyOptionCard(&#10;    option: SwiggyOption,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(8.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.Center,&#10;            verticalArrangement = Arrangement.Center,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp)&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = option.imageRes),&#10;                contentDescription = option.name,&#10;                modifier = Modifier.size(40.dp)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = option.name,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FestivalBanner(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(12.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    brush = Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            Color(0xFF1A4A5C),&#10;                            Color(0xFF2B5F5F),&#10;                            Color(0xFF1E4A4A)&#10;                        )&#10;                    )&#10;                )&#10;        ) {&#10;            // Banner content here&#10;            Text(&#10;                text = &quot;Festival Special Offers&quot;,&#10;                color = Color.White,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                modifier = Modifier&#10;                    .align(Alignment.Center)&#10;                    .padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.swiggyy.feature_food.components&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.swiggyy.R&#10;import com.example.swiggyy.feature_food.model.*&#10;&#10;@Composable&#10;fun CategoryItem(&#10;    category: FoodCategory,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;            .clickable(onClick = onClick)&#10;            .padding(4.dp)&#10;    ) {&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(64.dp)&#10;                .clip(CircleShape)&#10;                .background(Color.LightGray.copy(alpha = 0.2f))&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = category.imageRes),&#10;                contentDescription = category.name,&#10;                modifier = Modifier.size(32.dp)&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;        Text(&#10;            text = category.name,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            textAlign = TextAlign.Center,&#10;            maxLines = 2,&#10;            overflow = TextOverflow.Ellipsis&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RestaurantCard(&#10;    restaurant: Restaurant,&#10;    onRestaurantClick: () -&gt; Unit,&#10;    onFavoriteClick: (Boolean) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onRestaurantClick,&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(12.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = restaurant.imageRes),&#10;                    contentDescription = restaurant.name,&#10;                    contentScale = ContentScale.Crop,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;                &#10;                // Favorite button&#10;                IconButton(&#10;                    onClick = { onFavoriteClick(!restaurant.isFavorite) },&#10;                    modifier = Modifier&#10;                        .align(Alignment.TopEnd)&#10;                        .padding(8.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (restaurant.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                        contentDescription = if (restaurant.isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;,&#10;                        tint = if (restaurant.isFavorite) Color.Red else Color.White&#10;                    )&#10;                }&#10;                &#10;                // Offer tag&#10;                if (restaurant.offer.isNotEmpty()) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .align(Alignment.BottomStart)&#10;                            .padding(8.dp)&#10;                            .background(Color.Black.copy(alpha = 0.7f), RoundedCornerShape(4.dp))&#10;                            .padding(horizontal = 8.dp, vertical = 4.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = restaurant.offer,&#10;                            color = Color.White,&#10;                            style = MaterialTheme.typography.labelSmall&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            &#10;            // Restaurant details&#10;            Column(&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = restaurant.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                &#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Star,&#10;                        contentDescription = &quot;Rating&quot;,&#10;                        tint = Color(0xFFFFD700),&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;${restaurant.rating} (${restaurant.reviewCount})&quot;,&#10;                        style = MaterialTheme.typography.labelSmall&#10;                    )&#10;                    Text(&quot;•&quot;, modifier = Modifier.padding(horizontal = 2.dp))&#10;                    Text(&#10;                        text = restaurant.deliveryTime,&#10;                        style = MaterialTheme.typography.labelSmall&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = restaurant.cuisines.joinToString(&quot; • &quot;),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = Color.Gray,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                &#10;                if (restaurant.distance.isNotEmpty()) {&#10;                    Text(&#10;                        text = restaurant.distance,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;                &#10;                if (restaurant.hasFreeDelivery) {&#10;                    Text(&#10;                        text = &quot;FREE DELIVERY&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = Color.Green,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoreItemCard(&#10;    item: StoreItem,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(8.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.Center,&#10;            modifier = Modifier.padding(8.dp)&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = item.imageRes),&#10;                contentDescription = item.name,&#10;                modifier = Modifier&#10;                    .size(80.dp)&#10;                    .clip(RoundedCornerShape(8.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = item.name,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            &#10;            Text(&#10;                text = &quot;₹${item.discountedPrice}&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            if (item.originalPrice &gt; item.discountedPrice) {&#10;                Text(&#10;                    text = &quot;₹${item.originalPrice}&quot;,&#10;                    style = MaterialTheme.typography.labelSmall.copy(&#10;                        color = Color.Gray,&#10;                        textDecoration = TextDecoration.LineThrough&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SwiggyOptionCard(&#10;    option: SwiggyOption,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(8.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.Center,&#10;            verticalArrangement = Arrangement.Center,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp)&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = option.imageRes),&#10;                contentDescription = option.name,&#10;                modifier = Modifier.size(40.dp)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = option.name,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FestivalBanner(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(12.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    brush = Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            Color(0xFF1A4A5C),&#10;                            Color(0xFF2B5F5F),&#10;                            Color(0xFF1E4A4A)&#10;                        )&#10;                    )&#10;                )&#10;        ) {&#10;            // Banner content here&#10;            Text(&#10;                text = &quot;Festival Special Offers&quot;,&#10;                color = Color.White,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                modifier = Modifier&#10;                    .align(Alignment.Center)&#10;                    .padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/Category.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/Category.kt" />
              <option name="updatedContent" value="package com.example.swiggyy.feature_food.model&#10;&#10;data class Category(&#10;    val id: String,&#10;    val name: String,&#10;    val imageUrl: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/FoodState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/FoodState.kt" />
              <option name="updatedContent" value="package com.example.swiggyy.feature_food.model&#10;&#10;data class FoodState(&#10;    val locationName: String = &quot;&quot;,&#10;    val locationAddress: String = &quot;&quot;,&#10;    val searchQuery: String = &quot;&quot;,&#10;    val selectedFilter: String = &quot;&quot;,&#10;    val selectedSort: String = &quot;&quot;,&#10;    val categories: List&lt;Category&gt; = emptyList(),&#10;    val ninetyNineStoreItems: List&lt;StoreItem&gt; = emptyList(),&#10;    val reorderRestaurants: List&lt;Restaurant&gt; = emptyList(),&#10;    val quickDeliveryRestaurants: List&lt;Restaurant&gt; = emptyList(),&#10;    val featuredRestaurants: List&lt;Restaurant&gt; = emptyList(),&#10;    val moreOnSwiggyOptions: List&lt;SwiggyOption&gt; = emptyList()&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/Restaurant.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/Restaurant.kt" />
              <option name="updatedContent" value="package com.example.swiggyy.feature_food.model&#10;&#10;data class Restaurant(&#10;    val id: String,&#10;    val name: String,&#10;    val imageUrl: String,&#10;    val rating: Float,&#10;    val deliveryTime: Int,&#10;    val priceForTwo: Int,&#10;    val cuisine: String,&#10;    val isFavorite: Boolean = false&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/StoreItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/StoreItem.kt" />
              <option name="updatedContent" value="package com.example.swiggyy.feature_food.model&#10;&#10;data class StoreItem(&#10;    val id: String,&#10;    val name: String,&#10;    val imageUrl: String,&#10;    val price: Int,&#10;    val originalPrice: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/SwiggyOption.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/swiggyy/feature_food/model/SwiggyOption.kt" />
              <option name="updatedContent" value="package com.example.swiggyy.feature_food.model&#10;&#10;data class SwiggyOption(&#10;    val id: String,&#10;    val name: String,&#10;    val imageUrl: String,&#10;    val description: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/baseline_filter_list_24.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/baseline_filter_list_24.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_beverage.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_beverage.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M3,2l2.01,18.23C5.13,21.23 5.97,22 7,22h10c1.03,0 1.87,-0.77 1.99,-1.77L21,2L3,2zM12,19c-1.66,0 -3,-1.34 -3,-3 0,-2 3,-5.4 3,-5.4s3,3.4 3,5.4c0,1.66 -1.34,3 -3,3zM18.33,8L5.67,8l-0.44,-4h13.53l-0.43,4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_dining.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_dining.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M16,6v8h3v8h2L21,2c-2.76,0 -5,2.24 -5,4zM11,9L9,9L9,2L7,2v7L5,9L5,2L3,2v7c0,2.21 1.79,4 4,4v9h2v-9c2.21,0 4,-1.79 4,-4L13,2h-2v7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M10,18h4v-2h-4v2zM3,6v2h18V6H3zm0,7h18v-2H3v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>